const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const axios = require('axios');

const app = express();
const port = process.env.PORT || 8000;

app.get('/', (req, res) => {
  res.send('Bot with REAL AI is running!');
});

app.listen(port, '0.0.0.0', () => {
  console.log('Server started on port ' + port);
});

// ===== –¢–ï–õ–ï–ì–†–ê–ú –ë–û–¢ =====
const token = process.env.BOT_TOKEN;
const bot = new TelegramBot(token, { polling: true });

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –ò–ò - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø
async function askAI(question) {
  try {
    console.log('Asking AI:', question);
    
    // –ü–†–û–ë–£–ï–ú –†–ê–ó–ù–´–ï –ú–û–î–ï–õ–ò –ü–û –û–ß–ï–†–ï–î–ò
    const models = [
      'https://api-inference.huggingface.co/models/microsoft/DialoGPT-small',
      'https://api-inference.huggingface.co/models/gpt2',
      'https://api-inference.huggingface.co/models/facebook/blenderbot-400M-distill'
    ];
    
    let lastError;
    
    for (const modelUrl of models) {
      try {
        console.log('Trying model:', modelUrl);
        
        const response = await axios.post(
          modelUrl,
          {
            inputs: question,
            parameters: {
              max_length: 150,
              temperature: 0.9,
              do_sample: true,
              return_full_text: false
            }
          },
          {
            headers: {
              'Authorization': `Bearer ${process.env.HUGGING_FACE_TOKEN}`,
              'Content-Type': 'application/json'
            },
            timeout: 25000
          }
        );
        
        console.log('AI Response from', modelUrl, ':', response.data);
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞
        if (response.data && response.data[0] && response.data[0].generated_text) {
          let answer = response.data[0].generated_text;
          // –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
          if (answer.toLowerCase().includes(question.toLowerCase())) {
            answer = answer.replace(new RegExp(question, 'gi'), '').trim();
          }
          return answer || getSmartAnswer(question);
        }
        
        if (response.data && response.data.generated_text) {
          return response.data.generated_text;
        }
        
      } catch (error) {
        console.log(`Model ${modelUrl} failed:`, error.response?.status);
        lastError = error;
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é –º–æ–¥–µ–ª—å
        continue;
      }
    }
    
    // –ï—Å–ª–∏ –≤—Å–µ –º–æ–¥–µ–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
    throw lastError;
    
  } catch (error) {
    console.log('All AI models failed:', error.message);
    return getSmartAnswer(question);
  }
}

// –£–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
function getSmartAnswer(question) {
  const lowerQ = question.toLowerCase();
  
  // –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
  if (lowerQ.includes('—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤ –≥–æ–¥—É') || lowerQ.includes('–¥–Ω–µ–π –≤ –≥–æ–¥—É')) {
    return '–í –æ–±—ã—á–Ω–æ–º –≥–æ–¥—É 365 –¥–Ω–µ–π, –≤ –≤–∏—Å–æ–∫–æ—Å–Ω–æ–º –≥–æ–¥—É 366 –¥–Ω–µ–π! üìÖ';
  }
  if (lowerQ.includes('—Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –≤ —Å—É—Ç–∫–∞—Ö') || lowerQ.includes('—á–∞—Å–æ–≤ –≤ —Å—É—Ç–∫–∞—Ö')) {
    return '–í —Å—É—Ç–∫–∞—Ö 24 —á–∞—Å–∞! ‚è∞';
  }
  if (lowerQ.includes('—Å—Ç–æ–ª–∏—Ü–∞ —Ä–æ—Å—Å–∏–∏') || lowerQ.includes('—Å—Ç–æ–ª–∏—Ü–∞ —Ä–æ—Å—Å–∏–∏')) {
    return '–°—Ç–æ–ª–∏—Ü–∞ –†–æ—Å—Å–∏–∏ - –ú–æ—Å–∫–≤–∞! üèõÔ∏è';
  }
  if (lowerQ.includes('—Å–∫–æ–ª—å–∫–æ –ø–ª–∞–Ω–µ—Ç') || lowerQ.includes('–ø–ª–∞–Ω–µ—Ç –≤ —Å–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ')) {
    return '–í —Å–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ 8 –ø–ª–∞–Ω–µ—Ç: –ú–µ—Ä–∫—É—Ä–∏–π, –í–µ–Ω–µ—Ä–∞, –ó–µ–º–ª—è, –ú–∞—Ä—Å, –Æ–ø–∏—Ç–µ—Ä, –°–∞—Ç—É—Ä–Ω, –£—Ä–∞–Ω, –ù–µ–ø—Ç—É–Ω! ü™ê';
  }
  if (lowerQ.includes('–ø—Ä–∏–≤–µ—Ç') || lowerQ.includes('–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π') || lowerQ.includes('hello')) {
    return '–ü—Ä–∏–≤–µ—Ç! –Ø –ò–ò-–±–æ—Ç, –≥–æ—Ç–æ–≤—ã–π –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Ç–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã! ü§ñ';
  }
  if (lowerQ.includes('–∫–∞–∫ –¥–µ–ª–∞') || lowerQ.includes('–∫–∞–∫ —Ç—ã')) {
    return '–£ –º–µ–Ω—è –≤—Å–µ –æ—Ç–ª–∏—á–Ω–æ! –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∑–∞–ø—Ä–æ—Å—ã –∏ –ø–æ–º–æ–≥–∞—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º! üòä';
  }
  if (lowerQ.includes('—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å') || lowerQ.includes('—Ç–≤–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏')) {
    return '–Ø –º–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –ø–æ–º–æ–≥–∞—Ç—å —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏! üí°';
  }
  
  // –û–±—â–∏–µ —É–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
  const smartResponses = [
    `–ù–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ "${question}", —è –º–æ–≥—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ.`,
    `–≠—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –ú–æ–π –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–∞–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã.`,
    `–Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏ –≥–æ—Ç–æ–≤ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.`,
    `–ö–∞–∫ –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, —è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ –æ—Ç–≤–µ—Ç–∞—Ö –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã.`
  ];
  
  return smartResponses[Math.floor(Math.random() * smartResponses.length)];
}

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  const options = {
    reply_markup: {
      keyboard: [
        ['üß† –°–ø—Ä–æ—Å–∏—Ç—å –ò–ò', '‚ùì –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤'],
        ['üïê –í—Ä–µ–º—è', 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã']
      ],
      resize_keyboard: true
    }
  };
  
  bot.sendMessage(chatId, 
    '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å *–Ω–∞—Å—Ç–æ—è—â–∏–º –ò–ò*! üß†\n\n' +
    '–ó–∞–¥–∞–π –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å:\n' +
    '‚Ä¢ "–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤ –≥–æ–¥—É?"\n' + 
    '‚Ä¢ "–°—Ç–æ–ª–∏—Ü–∞ –†–æ—Å—Å–∏–∏?"\n' +
    '‚Ä¢ "–°–∫–æ–ª—å–∫–æ –ø–ª–∞–Ω–µ—Ç –≤ —Å–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ?"\n\n' +
    '–Ø –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –¥–∞—Ç—å —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç!', 
    options
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;

  if (!text || text.startsWith('/')) return;

  if (text === 'üß† –°–ø—Ä–æ—Å–∏—Ç—å –ò–ò') {
    bot.sendMessage(chatId, '–ó–∞–¥–∞–π –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å! –Ø –∏—Å–ø–æ–ª—å–∑—É—é –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤! üß†');
  } 
  else if (text === '‚ùì –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤') {
    bot.sendMessage(chatId, 
      '–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ò–ò:\n\n' +
      '‚Ä¢ "–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤ –≥–æ–¥—É?"\n' +
      '‚Ä¢ "–°—Ç–æ–ª–∏—Ü–∞ –§—Ä–∞–Ω—Ü–∏–∏?"\n' + 
      '‚Ä¢ "–°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –≤ —Å—É—Ç–∫–∞—Ö?"\n' +
      '‚Ä¢ "–ß—Ç–æ —Ç–∞–∫–æ–µ —Ñ–æ—Ç–æ—Å–∏–Ω—Ç–µ–∑?"\n' +
      '‚Ä¢ "–ö—Ç–æ –∏–∑–æ–±—Ä–µ–ª —Ç–µ–ª–µ—Ñ–æ–Ω?"\n\n' +
      '–ò–ª–∏ –∑–∞–¥–∞–π —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å!'
    );
  }
  else if (text === 'üïê –í—Ä–µ–º—è') {
    bot.sendMessage(chatId, `üïê –¢–æ—á–Ω–æ–µ –≤—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}`);
  }
  else if (text === 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã') {
    bot.sendMessage(chatId, 'üë®‚Äçüíª –°–æ–∑–¥–∞—Ç–µ–ª—å: @ch0nyatski\n\n–ë–æ—Ç —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Hugging Face –ò–ò');
  }
  else {
    const thinkingMsg = await bot.sendMessage(chatId, 'üß† –ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å...');
    
    const aiResponse = await askAI(text);
    
    bot.deleteMessage(chatId, thinkingMsg.message_id);
    bot.sendMessage(chatId, `ü§ñ *–û—Ç–≤–µ—Ç:*\n\n${aiResponse}`);
  }
});

console.log('–ë–æ—Ç —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ò–ò –∑–∞–ø—É—â–µ–Ω!');
