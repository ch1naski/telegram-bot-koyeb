const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const axios = require('axios');

const app = express();
const port = process.env.PORT || 8000;

app.get('/', (req, res) => {
  res.send('Music Bot is running!');
});

app.listen(port, '0.0.0.0', () => {
  console.log('Server started on port ' + port);
});

const token = process.env.BOT_TOKEN;
const bot = new TelegramBot(token, { polling: true });

// –ë–∞–∑–∞ –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
const musicDatabase = {
  '—Ä–æ–∫': [
    { title: 'Queen - Bohemian Rhapsody', url: 'https://www.youtube.com/watch?v=fJ9rUzIMcZQ' },
    { title: 'Led Zeppelin - Stairway to Heaven', url: 'https://www.youtube.com/watch?v=QkF3oxiDcdk' },
    { title: 'The Beatles - Hey Jude', url: 'https://www.youtube.com/watch?v=A_MjCqQoLLA' },
    { title: 'AC/DC - Back In Black', url: 'https://www.youtube.com/watch?v=pAgnJDJN4VA' }
  ],
  '–ø–æ–ø': [
    { title: 'Taylor Swift - Shake It Off', url: 'https://www.youtube.com/watch?v=nfWlot6h_JM' },
    { title: 'Ed Sheeran - Shape of You', url: 'https://www.youtube.com/watch?v=JGwWNGJdvx8' },
    { title: 'Adele - Rolling in the Deep', url: 'https://www.youtube.com/watch?v=rYEDA3JcQqw' },
    { title: 'Bruno Mars - Uptown Funk', url: 'https://www.youtube.com/watch?v=OPf0YbXqDm0' }
  ],
  '—Ö–∏–ø-—Ö–æ–ø': [
    { title: 'Eminem - Lose Yourself', url: 'https://www.youtube.com/watch?v=_Yhyp-_hX2s' },
    { title: 'Drake - God\'s Plan', url: 'https://www.youtube.com/watch?v=xpVfcZ0ZcFM' },
    { title: 'Kendrick Lamar - HUMBLE.', url: 'https://www.youtube.com/watch?v=tvTRZJ-4EyI' },
    { title: 'Travis Scott - SICKO MODE', url: 'https://www.youtube.com/watch?v=6ONRf7h3Mdk' }
  ],
  '—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è': [
    { title: 'Daft Punk - Get Lucky', url: 'https://www.youtube.com/watch?v=5NV6Rdv1a3I' },
    { title: 'Calvin Harris - Feel So Close', url: 'https://www.youtube.com/watch?v=dGghkjpNCQ8' },
    { title: 'Avicii - Wake Me Up', url: 'https://www.youtube.com/watch?v=IcrbM1l_BoI' },
    { title: 'David Guetta - Titanium', url: 'https://www.youtube.com/watch?v=JRfuAukYTKg' }
  ],
  '–∫–ª–∞—Å—Å–∏–∫–∞': [
    { title: 'Beethoven - Symphony No. 5', url: 'https://www.youtube.com/watch?v=fOk8Tm815lE' },
    { title: 'Mozart - Eine kleine Nachtmusik', url: 'https://www.youtube.com/watch?v=Qb_jQBgzU-I' },
    { title: 'Tchaikovsky - Swan Lake', url: 'https://www.youtube.com/watch?v=9cNQ8T2vPCk' },
    { title: 'Vivaldi - Four Seasons', url: 'https://www.youtube.com/watch?v=GRxofEmo3HA' }
  ],
  '–¥–∂–∞–∑': [
    { title: 'Louis Armstrong - What a Wonderful World', url: 'https://www.youtube.com/watch?v=CWzrABouyeE' },
    { title: 'Frank Sinatra - Fly Me To The Moon', url: 'https://www.youtube.com/watch?v=ZEcqHA7dbwM' },
    { title: 'Ella Fitzgerald - Summertime', url: 'https://www.youtube.com/watch?v=LMuV4X4rW1c' },
    { title: 'Dave Brubeck - Take Five', url: 'https://www.youtube.com/watch?v=vmDDOFXSgAs' }
  ]
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –º—É–∑—ã–∫–∏
function findMusic(query) {
  const lowerQuery = query.toLowerCase();
  
  // –ü–æ–∏—Å–∫ –ø–æ –∂–∞–Ω—Ä–∞–º
  for (const [genre, songs] of Object.entries(musicDatabase)) {
    if (lowerQuery.includes(genre)) {
      const randomSong = songs[Math.floor(Math.random() * songs.length)];
      return {
        found: true,
        message: `üéµ *${genre.toUpperCase()} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:*\n\n**${randomSong.title}**\n\n–°—Å—ã–ª–∫–∞: ${randomSong.url}`,
        song: randomSong
      };
    }
  }
  
  // –ü–æ–∏—Å–∫ –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é
  if (lowerQuery.includes('–≥—Ä—É—Å—Ç') || lowerQuery.includes('–ø–µ—á–∞–ª')) {
    const sadSongs = [...musicDatabase['–∫–ª–∞—Å—Å–∏–∫–∞'], ...musicDatabase['–¥–∂–∞–∑']];
    const randomSong = sadSongs[Math.floor(Math.random() * sadSongs.length)];
    return {
      found: true,
      message: `üéµ *–î–ª—è –≥—Ä—É—Å—Ç–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è:*\n\n**${randomSong.title}**\n\n–°—Å—ã–ª–∫–∞: ${randomSong.url}`,
      song: randomSong
    };
  }
  
  if (lowerQuery.includes('–≤–µ—Å–µ–ª') || lowerQuery.includes('—Ç–∞–Ω—Ü')) {
    const happySongs = [...musicDatabase['–ø–æ–ø'], ...musicDatabase['—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è']];
    const randomSong = happySongs[Math.floor(Math.random() * happySongs.length)];
    return {
      found: true,
      message: `üéµ *–î–ª—è –≤–µ—Å–µ–ª–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è:*\n\n**${randomSong.title}**\n\n–°—Å—ã–ª–∫–∞: ${randomSong.url}`,
      song: randomSong
    };
  }
  
  if (lowerQuery.includes('—ç–Ω–µ—Ä–≥') || lowerQuery.includes('—Å–ø–æ—Ä—Ç')) {
    const energySongs = [...musicDatabase['—Ä–æ–∫'], ...musicDatabase['—Ö–∏–ø-—Ö–æ–ø']];
    const randomSong = energySongs[Math.floor(Math.random() * energySongs.length)];
    return {
      found: true,
      message: `üéµ *–î–ª—è —ç–Ω–µ—Ä–≥–∏–∏:*\n\n**${randomSong.title}**\n\n–°—Å—ã–ª–∫–∞: ${randomSong.url}`,
      song: randomSong
    };
  }
  
  // –°–ª—É—á–∞–π–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
  const allGenres = Object.keys(musicDatabase);
  const randomGenre = allGenres[Math.floor(Math.random() * allGenres.length)];
  const randomSong = musicDatabase[randomGenre][Math.floor(Math.random() * musicDatabase[randomGenre].length)];
  
  return {
    found: false,
    message: `üéµ *–°–ª—É—á–∞–π–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è (${randomGenre}):*\n\n**${randomSong.title}**\n\n–°—Å—ã–ª–∫–∞: ${randomSong.url}`,
    song: randomSong
  };
}

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  const options = {
    reply_markup: {
      keyboard: [
        ['üéµ –ù–∞–π—Ç–∏ –º—É–∑—ã–∫—É', 'üé∏ –ü–æ –∂–∞–Ω—Ä–∞–º'],
        ['üéß –°–ª—É—á–∞–π–Ω—ã–π —Ç—Ä–µ–∫', 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã']
      ],
      resize_keyboard: true
    }
  };
  
  bot.sendMessage(chatId, 
    '–ü—Ä–∏–≤–µ—Ç! –Ø *–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π –ë–æ—Ç*! üéµ\n\n' +
    '–Ø –º–æ–≥—É:\n' +
    '‚Ä¢ –ù–∞–π—Ç–∏ –º—É–∑—ã–∫—É –ø–æ –∂–∞–Ω—Ä—É\n' +
    '‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é\n' +
    '‚Ä¢ –î–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ç—Ä–µ–∫\n\n' +
    '–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏:\n' +
    '‚Ä¢ "—Ä–æ–∫", "–ø–æ–ø", "—Ö–∏–ø-—Ö–æ–ø"\n' +
    '‚Ä¢ "–≥—Ä—É—Å—Ç–Ω–∞—è –º—É–∑—ã–∫–∞"\n' +
    '‚Ä¢ "–¥–ª—è —Ç–∞–Ω—Ü–µ–≤"\n' +
    '‚Ä¢ –ò–ª–∏ –ª—é–±–æ–π –∑–∞–ø—Ä–æ—Å!', 
    options
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;

  if (!text || text.startsWith('/')) return;

  if (text === 'üéµ –ù–∞–π—Ç–∏ –º—É–∑—ã–∫—É') {
    bot.sendMessage(chatId, '–ù–∞–ø–∏—à–∏ —á—Ç–æ –∏—â–µ—à—å:\n‚Ä¢ –ñ–∞–Ω—Ä (—Ä–æ–∫, –ø–æ–ø, –¥–∂–∞–∑...)\n‚Ä¢ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ (–≥—Ä—É—Å—Ç–Ω–∞—è, –≤–µ—Å–µ–ª–∞—è...)\n‚Ä¢ –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ç–µ–º—É!');
  } 
  else if (text === 'üé∏ –ü–æ –∂–∞–Ω—Ä–∞–º') {
    bot.sendMessage(chatId, 
      'üéµ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∂–∞–Ω—Ä—ã:*\n\n' +
      '‚Ä¢ üé∏ –†–æ–∫\n' +
      '‚Ä¢ üé§ –ü–æ–ø\n' +
      '‚Ä¢ üéß –•–∏–ø-—Ö–æ–ø\n' +
      '‚Ä¢ üíø –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è\n' +
      '‚Ä¢ üéª –ö–ª–∞—Å—Å–∏–∫–∞\n' +
      '‚Ä¢ üé∑ –î–∂–∞–∑\n\n' +
      '–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∂–∞–Ω—Ä–∞!'
    );
  }
  else if (text === 'üéß –°–ª—É—á–∞–π–Ω—ã–π —Ç—Ä–µ–∫') {
    const result = findMusic('—Å–ª—É—á–∞–π–Ω—ã–π');
    bot.sendMessage(chatId, result.message, { parse_mode: 'Markdown' });
  }
  else if (text === 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã') {
    bot.sendMessage(chatId, 'üë®‚Äçüíª –°–æ–∑–¥–∞—Ç–µ–ª—å: @ch0nyatski\n\n–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π –±–æ—Ç üéµ');
  }
  else {
    const thinkingMsg = await bot.sendMessage(chatId, 'üéµ –ò—â—É –º—É–∑—ã–∫—É...');
    
    try {
      const result = findMusic(text);
      bot.deleteMessage(chatId, thinkingMsg.message_id);
      
      if (result.found) {
        bot.sendMessage(chatId, result.message, { parse_mode: 'Markdown' });
      } else {
        bot.sendMessage(chatId, 
          `${result.message}\n\n*–ù–µ –Ω–∞—à–µ–ª —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è, –≤–æ—Ç —Å–ª—É—á–∞–π–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è!*`, 
          { parse_mode: 'Markdown' }
        );
      }
    } catch (error) {
      bot.deleteMessage(chatId, thinkingMsg.message_id);
      bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –º—É–∑—ã–∫–∏. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.');
    }
  }
});

console.log('–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω! üéµ');
