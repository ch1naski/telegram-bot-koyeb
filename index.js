const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const axios = require('axios');

process.env.NTBA_FIX_319 = 1;

const app = express();
const port = process.env.PORT || 8000;

app.get('/', (req, res) => {
  res.send('Bot with AI is running!');
});

app.listen(port, '0.0.0.0', () => {
  console.log('Server started on port ' + port);
});

const token = process.env.BOT_TOKEN;
const bot = new TelegramBot(token, {
  polling: {
    interval: 1000,
    params: { timeout: 10 }
  }
});

bot.on('polling_error', (error) => {
  console.log('Polling error:', error.message);
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ Hugging Face - –£–õ–£–ß–®–ï–ù–ù–ê–Ø
async function askHuggingFace(question) {
  try {
    console.log('Sending to HF:', question);
    
    const response = await axios.post(
      // –ò–°–ü–û–õ–¨–ó–£–ï–ú –ú–û–î–ï–õ–¨, –ö–û–¢–û–†–ê–Ø –¢–û–ß–ù–û –†–ê–ë–û–¢–ê–ï–¢
      'https://api-inference.huggingface.co/models/microsoft/DialoGPT-small',
      {
        inputs: {
          text: question,
          // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ª—É—á—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
          past_user_inputs: [],
          generated_responses: []
        }
      },
      {
        headers: {
          'Authorization': `Bearer ${process.env.HUGGING_FACE_TOKEN}`,
          'Content-Type': 'application/json'
        },
        timeout: 45000 // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç
      }
    );
    
    console.log('HF Response:', response.data);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è DialoGPT
    if (response.data && response.data.generated_text) {
      return response.data.generated_text;
    } else {
      return 'ü§ñ –ò–ò –æ–±—Ä–∞–±–æ—Ç–∞–ª –∑–∞–ø—Ä–æ—Å, –Ω–æ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –æ—Ç–≤–µ—Ç.';
    }
  } catch (error) {
    console.log('Hugging Face Error:', error.response?.status, error.response?.data);
    
    // –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è - –ø—Ä–æ–±—É–µ–º –ø–æ–¥–æ–∂–¥–∞—Ç—å
    if (error.response?.status === 503) {
      const waitTime = error.response.data.estimated_time || 30;
      console.log(`Model is loading, waiting ${waitTime} seconds...`);
      
      // –ñ–¥–µ–º –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
      await new Promise(resolve => setTimeout(resolve, waitTime * 1000));
      return askHuggingFace(question); // –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤
    }
    
    return '‚ö†Ô∏è –ò–ò –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞.';
  }
}

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, (msg) => {
  const options = {
    reply_markup: {
      keyboard: [
        ['‚ùì –°–ø—Ä–æ—Å–∏—Ç—å —É –ò–ò', 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã'],
        ['üïê –í—Ä–µ–º—è', 'üé≤ –§–∞–∫—Ç']
      ],
      resize_keyboard: true
    }
  };
  
  bot.sendMessage(msg.chat.id, 
    '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å –ò–ò –æ—Ç Hugging Face! üß†\n–ù–∞–ø–∏—à–∏ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞–∂–º–∏ "–°–ø—Ä–æ—Å–∏—Ç—å —É –ò–ò"\n\n*–ò–ò –º–æ–∂–µ—Ç –æ—Ç–≤–µ–¥–∞—Ç—å 10-30 —Å–µ–∫—É–Ω–¥ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ*', 
    options
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;

  // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  if (!text || text.startsWith('/')) return;

  if (text === '‚ùì –°–ø—Ä–æ—Å–∏—Ç—å —É –ò–ò') {
    bot.sendMessage(chatId, '–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏ —è –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ –ò–ò! üß†\n\n*–ü–µ—Ä–≤—ã–µ –æ—Ç–≤–µ—Ç—ã –º–æ–≥—É—Ç –∑–∞–Ω–∏–º–∞—Ç—å –¥–æ 30 —Å–µ–∫—É–Ω–¥*');
  } 
  else if (text === 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã') {
    bot.sendMessage(chatId, '–°–æ–∑–¥–∞—Ç–µ–ª—å: @ch0nyatski');
  }
  else if (text === 'üïê –í—Ä–µ–º—è') {
    bot.sendMessage(chatId, '‚è∞ –í—Ä–µ–º—è: ' + new Date().toLocaleString('ru-RU'));
  }
  else if (text === 'üé≤ –§–∞–∫—Ç') {
    const facts = [
      '–ö–æ—Ç—ã —Å–ø—è—Ç 70% –∂–∏–∑–Ω–∏ üò¥',
      '–ú–µ–¥ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ—Ä—Ç–∏—Ç—Å—è üçØ',
      '–¢–µ–ª–µ–≥—Ä–∞–º —Å–æ–∑–¥–∞–ª–∏ –≤ 2013 –≥–æ–¥—É',
      'Python –Ω–∞–∑–≤–∞–Ω –≤ —á–µ—Å—Ç—å –∫–æ–º–µ–¥–∏–π–Ω–æ–≥–æ —à–æ—É üêç',
      '–ü–µ—Ä–≤—ã–π –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–π –≤–∏—Ä—É—Å –ø–æ—è–≤–∏–ª—Å—è –≤ 1986 –≥–æ–¥—É'
    ];
    bot.sendMessage(chatId, 'üìö –§–∞–∫—Ç: ' + facts[Math.floor(Math.random() * facts.length)]);
  }
  else {
    // –ï—Å–ª–∏ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ò–ò
    const thinkingMsg = await bot.sendMessage(chatId, 'ü§î –î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...\n*–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 30 —Å–µ–∫—É–Ω–¥*');
    
    try {
      const aiResponse = await askHuggingFace(text);
      
      // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–î—É–º–∞—é..." –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
      bot.deleteMessage(chatId, thinkingMsg.message_id);
      bot.sendMessage(chatId, aiResponse);
    } catch (error) {
      // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      bot.deleteMessage(chatId, thinkingMsg.message_id);
      bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }
});

console.log('–ë–æ—Ç —Å DialoGPT-small –ò–ò –∑–∞–ø—É—â–µ–Ω!');
