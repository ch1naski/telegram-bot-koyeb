const TelegramBot = require('node-telegram-bot-api');
const express = require('express');

const app = express();
const port = process.env.PORT || 8000;

app.get('/', (req, res) => {
  res.send('Music Bot is running!');
});

app.listen(port, '0.0.0.0', () => {
  console.log('Server started on port ' + port);
});

const token = process.env.BOT_TOKEN;
const bot = new TelegramBot(token, { polling: true });

// –ú—É–∑—ã–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞
const musicDatabase = {
  '—Ä–æ–∫': [
    { title: 'Queen - Bohemian Rhapsody', url: 'https://www.youtube.com/watch?v=fJ9rUzIMcZQ' },
    { title: 'Led Zeppelin - Stairway to Heaven', url: 'https://www.youtube.com/watch?v=QkF3oxiDcdk' }
  ],
  '–ø–æ–ø': [
    { title: 'Taylor Swift - Shake It Off', url: 'https://www.youtube.com/watch?v=nfWlot6h_JM' },
    { title: 'Ed Sheeran - Shape of You', url: 'https://www.youtube.com/watch?v=JGwWNGJdvx8' }
  ],
  '—Ö–∏–ø-—Ö–æ–ø': [
    { title: 'Eminem - Lose Yourself', url: 'https://www.youtube.com/watch?v=_Yhyp-_hX2s' },
    { title: 'Drake - God\'s Plan', url: 'https://www.youtube.com/watch?v=xpVfcZ0ZcFM' }
  ],
  '—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è': [
    { title: 'Daft Punk - Get Lucky', url: 'https://www.youtube.com/watch?v=5NV6Rdv1a3I' },
    { title: 'Avicii - Wake Me Up', url: 'https://www.youtube.com/watch?v=IcrbM1l_BoI' }
  ]
};

// –ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏
function findMusic(query) {
  const lowerQuery = query.toLowerCase();
  
  for (const [genre, songs] of Object.entries(musicDatabase)) {
    if (lowerQuery.includes(genre)) {
      const randomSong = songs[Math.floor(Math.random() * songs.length)];
      return `üéµ *${genre.toUpperCase()}:* ${randomSong.title}\n\n${randomSong.url}`;
    }
  }
  
  // –°–ª—É—á–∞–π–Ω–∞—è –ø–µ—Å–Ω—è
  const allGenres = Object.keys(musicDatabase);
  const randomGenre = allGenres[Math.floor(Math.random() * allGenres.length)];
  const randomSong = musicDatabase[randomGenre][Math.floor(Math.random() * musicDatabase[randomGenre].length)];
  
  return `üéµ *–°–ª—É—á–∞–π–Ω—ã–π —Ç—Ä–µ–∫ (${randomGenre}):* ${randomSong.title}\n\n${randomSong.url}`;
}

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  const options = {
    reply_markup: {
      keyboard: [
        ['üéµ –ù–∞–π—Ç–∏ –º—É–∑—ã–∫—É', 'üéß –°–ª—É—á–∞–π–Ω—ã–π —Ç—Ä–µ–∫'],
        ['üé∏ –ñ–∞–Ω—Ä—ã', 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã']
      ],
      resize_keyboard: true
    }
  };
  
  bot.sendMessage(chatId, 
    '–ü—Ä–∏–≤–µ—Ç! –Ø –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –±–æ—Ç! üéµ\n\n–ù–∞–ø–∏—à–∏ –∂–∞–Ω—Ä: —Ä–æ–∫, –ø–æ–ø, —Ö–∏–ø-—Ö–æ–ø, —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è', 
    options
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;

  if (!text || text.startsWith('/')) return;

  if (text === 'üéµ –ù–∞–π—Ç–∏ –º—É–∑—ã–∫—É') {
    bot.sendMessage(chatId, '–ù–∞–ø–∏—à–∏ –∂–∞–Ω—Ä –º—É–∑—ã–∫–∏: —Ä–æ–∫, –ø–æ–ø, —Ö–∏–ø-—Ö–æ–ø, —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è');
  } 
  else if (text === 'üéß –°–ª—É—á–∞–π–Ω—ã–π —Ç—Ä–µ–∫') {
    const result = findMusic('—Å–ª—É—á–∞–π–Ω—ã–π');
    bot.sendMessage(chatId, result, { parse_mode: 'Markdown' });
  }
  else if (text === 'üé∏ –ñ–∞–Ω—Ä—ã') {
    bot.sendMessage(chatId, '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∂–∞–Ω—Ä—ã:\n‚Ä¢ –†–æ–∫\n‚Ä¢ –ü–æ–ø\n‚Ä¢ –•–∏–ø-—Ö–æ–ø\n‚Ä¢ –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è');
  }
  else if (text === 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã') {
    bot.sendMessage(chatId, '–°–æ–∑–¥–∞—Ç–µ–ª—å: @ch0nyatski');
  }
  else {
    const result = findMusic(text);
    bot.sendMessage(chatId, result, { parse_mode: 'Markdown' });
  }
});

console.log('–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω! üéµ');
