const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const axios = require('axios');

const app = express();
const port = process.env.PORT || 8000;

app.get('/', (req, res) => {
  res.send('Bot with REAL AI is running!');
});

app.listen(port, '0.0.0.0', () => {
  console.log('Server started on port ' + port);
});

const token = process.env.BOT_TOKEN;
const bot = new TelegramBot(token, { polling: true });

// –ù–ê–°–¢–û–Ø–©–ò–ô –ò–ò —á–µ—Ä–µ–∑ —Ä–∞–±–æ—Ç–∞—é—â–∏–π API
async function askRealAI(question) {
  try {
    console.log('Asking Real AI:', question);
    
    // –í–∞—Ä–∏–∞–Ω—Ç 1: –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π OpenAI-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π API
    const response = await axios.post(
      'https://api.deepinfra.com/v1/openai/chat/completions',
      {
        model: 'mistralai/Mixtral-8x7B-Instruct-v0.1',
        messages: [
          {
            role: 'user',
            content: question
          }
        ],
        max_tokens: 500,
        temperature: 0.7
      },
      {
        headers: {
          'Authorization': `Bearer ${process.env.HUGGING_FACE_TOKEN}`,
          'Content-Type': 'application/json'
        },
        timeout: 30000
      }
    );
    
    console.log('Real AI Response:', response.data);
    
    if (response.data.choices && response.data.choices[0].message.content) {
      return response.data.choices[0].message.content;
    }
    
    throw new Error('No response from AI');
    
  } catch (error) {
    console.log('DeepInfra AI Error:', error.response?.data || error.message);
    
    // –ü—Ä–æ–±—É–µ–º –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç - –¥—Ä—É–≥–æ–π —Ä–∞–±–æ—Ç–∞—é—â–∏–π API
    return tryBackupAI(question);
  }
}

// –ó–∞–ø–∞—Å–Ω–æ–π —Ä–∞–±–æ—Ç–∞—é—â–∏–π API
async function tryBackupAI(question) {
  try {
    console.log('Trying Backup AI...');
    
    // Hugging Face Inference API —Å —Ä–∞–±–æ—Ç–∞—é—â–µ–π –º–æ–¥–µ–ª—å—é
    const response = await axios.post(
      'https://api-inference.huggingface.co/models/google/flan-t5-xl',
      {
        inputs: question,
        parameters: {
          max_length: 200,
          temperature: 0.9,
          do_sample: true
        }
      },
      {
        headers: {
          'Authorization': `Bearer ${process.env.HUGGING_FACE_TOKEN}`,
          'Content-Type': 'application/json'
        },
        timeout: 25000
      }
    );
    
    console.log('Backup AI Response:', response.data);
    
    if (response.data && response.data[0] && response.data[0].generated_text) {
      return response.data[0].generated_text;
    }
    
    return 'ü§ñ –ò–ò –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
    
  } catch (error) {
    console.log('Backup AI also failed:', error.response?.status);
    return '‚ö†Ô∏è –í—Å–µ –ò–ò —Å–µ—Ä–≤–∏—Å—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω!';
  }
}

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  const options = {
    reply_markup: {
      keyboard: [
        ['üß† –°–ø—Ä–æ—Å–∏—Ç—å –ò–ò', 'üåç –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤'],
        ['üïê –í—Ä–µ–º—è', 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã']
      ],
      resize_keyboard: true
    }
  };
  
  bot.sendMessage(chatId, 
    '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å *–ù–ê–°–¢–û–Ø–©–ò–ú –ò–°–ö–£–°–°–¢–í–ï–ù–ù–´–ú –ò–ù–¢–ï–õ–õ–ï–ö–¢–û–ú*! üß†\n\n' +
    '–ó–∞–¥–∞–π *–õ–Æ–ë–û–ô* –≤–æ–ø—Ä–æ—Å - –¥–∞–∂–µ —Ç–æ—Ç, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ—Ç –≤ –∫–æ–¥–µ!\n\n' +
    '–ü—Ä–∏–º–µ—Ä—ã:\n' +
    '‚Ä¢ "–ù–∞–ø–∏—à–∏ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –ø—Ä–æ –∫–æ—Ç–∞"\n' + 
    '‚Ä¢ "–û–±—ä—è—Å–Ω–∏ –∫–≤–∞–Ω—Ç–æ–≤—É—é —Ñ–∏–∑–∏–∫—É –ø—Ä–æ—Å—Ç–æ"\n' +
    '‚Ä¢ "–ü—Ä–∏–¥—É–º–∞–π —Ä–µ—Ü–µ–ø—Ç —É–∂–∏–Ω–∞"\n' +
    '‚Ä¢ "–ß—Ç–æ —Ç–∞–∫–æ–µ —á–µ—Ä–Ω—ã–µ –¥—ã—Ä—ã?"\n\n' +
    '–Ø –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É—é –Ω–µ–π—Ä–æ—Å–µ—Ç–∏!', 
    options
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;

  if (!text || text.startsWith('/')) return;

  if (text === 'üß† –°–ø—Ä–æ—Å–∏—Ç—å –ò–ò') {
    bot.sendMessage(chatId, 
      '–ó–∞–¥–∞–π *–õ–Æ–ë–û–ô* –≤–æ–ø—Ä–æ—Å! –Ø –∏—Å–ø–æ–ª—å–∑—É—é –Ω–∞—Å—Ç–æ—è—â–∏–π –ò–ò:\n\n' +
      '‚Ä¢ Mistral AI (Mixtral 8x7B)\n' +
      '‚Ä¢ Google FLAN-T5\n\n' +
      '–ú–æ–∂–µ—à—å —Å–ø—Ä–æ—Å–∏—Ç—å –æ —á–µ–º —É–≥–æ–¥–Ω–æ - –¥–∞–∂–µ –µ—Å–ª–∏ —ç—Ç–æ–≥–æ –Ω–µ—Ç –≤ –∫–æ–¥–µ! üß†'
    );
  } 
  else if (text === 'üåç –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤') {
    bot.sendMessage(chatId, 
      '–ü—Ä–∏–º–µ—Ä—ã *—Ä–µ–∞–ª—å–Ω—ã—Ö* –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ò–ò:\n\n' +
      'üé® *–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ:*\n' +
      '‚Ä¢ "–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–π —Ä–∞—Å—Å–∫–∞–∑"\n' +
      '‚Ä¢ "–ü—Ä–∏–¥—É–º–∞–π –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–∞—Ñ–µ"\n\n' +
      'üî¨ *–ù–∞—É–∫–∞:*\n' +
      '‚Ä¢ "–û–±—ä—è—Å–Ω–∏ —Ç–µ–æ—Ä–∏—é –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"\n' +
      '‚Ä¢ "–ß—Ç–æ —Ç–∞–∫–æ–µ –î–ù–ö?"\n\n' +
      'üíº *–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ:*\n' +
      '‚Ä¢ "–°–æ—Å—Ç–∞–≤—å –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"\n' +
      '‚Ä¢ "–î–∞–π —Å–æ–≤–µ—Ç—ã –ø–æ –∏–∑—É—á–µ–Ω–∏—é –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ"\n\n' +
      '‚ùì *–õ—é–±—ã–µ –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã!*'
    );
  }
  else if (text === 'üïê –í—Ä–µ–º—è') {
    bot.sendMessage(chatId, `üïê –¢–æ—á–Ω–æ–µ –≤—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}`);
  }
  else if (text === 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã') {
    bot.sendMessage(chatId, 'üë®‚Äçüíª –°–æ–∑–¥–∞—Ç–µ–ª—å: @ch0nyatski\n\n–ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–∞—Å—Ç–æ—è—â–∏–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏!');
  }
  else {
    const thinkingMsg = await bot.sendMessage(chatId, 'üß† –ù–µ–π—Ä–æ—Å–µ—Ç—å –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç...');
    
    const aiResponse = await askRealAI(text);
    
    bot.deleteMessage(chatId, thinkingMsg.message_id);
    bot.sendMessage(chatId, `ü§ñ *–û—Ç–≤–µ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏:*\n\n${aiResponse}`);
  }
});

console.log('–ë–æ—Ç —Å –ù–ê–°–¢–û–Ø–©–ò–ú –ò–ò –∑–∞–ø—É—â–µ–Ω!');
