const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const ytdl = require('ytdl-core');
const fs = require('fs');
const path = require('path');

const app = express();
const port = process.env.PORT || 8000;

app.get('/', (req, res) => {
  res.send('Music Download Bot is running!');
});

app.listen(port, '0.0.0.0', () => {
  console.log('üéµ Music Download Bot started on port', port);
});

const token = process.env.BOT_TOKEN;
const bot = new TelegramBot(token, { 
  polling: {
    interval: 300,
    timeout: 10,
    limit: 100
  }
});

// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
const tempDir = './temp';
if (!fs.existsSync(tempDir)) {
  fs.mkdirSync(tempDir);
}

// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
function cleanupTempFiles() {
  try {
    const files = fs.readdirSync(tempDir);
    const now = Date.now();
    const maxAge = 30 * 60 * 1000; // 30 –º–∏–Ω—É—Ç
    
    files.forEach(file => {
      const filePath = path.join(tempDir, file);
      const stats = fs.statSync(filePath);
      
      if (now - stats.mtime.getTime() > maxAge) {
        fs.unlinkSync(filePath);
        console.log('Cleaned up old file:', file);
      }
    });
  } catch (error) {
    console.log('Cleanup error:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
setInterval(cleanupTempFiles, 10 * 60 * 1000);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞ YouTube
async function searchYouTube(query) {
  try {
    const searchUrl = `https://www.youtube.com/results?search_query=${encodeURIComponent(query + ' official audio')}`;
    
    const response = await fetch(searchUrl, {
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
      }
    });
    
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    
    const html = await response.text();
    
    // –ò—â–µ–º videoId –≤ HTML
    const videoIdMatch = html.match(/"videoId":"([^"]{11})"/);
    if (videoIdMatch && videoIdMatch[1]) {
      return `https://www.youtube.com/watch?v=${videoIdMatch[1]}`;
    }
    
    return null;
  } catch (error) {
    console.log('YouTube search error:', error.message);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∞—É–¥–∏–æ
async function downloadAudio(youtubeUrl, chatId) {
  return new Promise((resolve, reject) => {
    try {
      const videoId = new URL(youtubeUrl).searchParams.get('v') || youtubeUrl.split('v=')[1];
      const tempFile = path.join(tempDir, `${videoId}_${chatId}_${Date.now()}.mp3`);
      
      console.log('Starting download:', youtubeUrl);
      
      const videoStream = ytdl(youtubeUrl, {
        filter: 'audioonly',
        quality: 'highestaudio',
      });
      
      const writeStream = fs.createWriteStream(tempFile);
      
      videoStream.pipe(writeStream);
      
      writeStream.on('finish', () => {
        console.log('Download completed:', tempFile);
        resolve(tempFile);
      });
      
      writeStream.on('error', (error) => {
        console.log('Write stream error:', error);
        reject(error);
      });
      
      videoStream.on('error', (error) => {
        console.log('Video stream error:', error);
        reject(error);
      });
      
    } catch (error) {
      console.log('Download function error:', error);
      reject(error);
    }
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ
async function getVideoInfo(youtubeUrl) {
  try {
    const info = await ytdl.getInfo(youtubeUrl);
    return {
      title: info.videoDetails.title.replace(/[^\w\s–∞-—è–ê-–Ø]/gi, ' ').trim(),
      duration: Math.round(info.videoDetails.lengthSeconds / 60) + ' –º–∏–Ω',
      thumbnail: info.videoDetails.thumbnails[0]?.url
    };
  } catch (error) {
    console.log('Video info error:', error.message);
    return null;
  }
}

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  const options = {
    reply_markup: {
      keyboard: [
        ['üéµ –°–∫–∞—á–∞—Ç—å —Ç—Ä–µ–∫', 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã'],
        ['‚ÑπÔ∏è –ü–æ–º–æ—â—å', '‚ö° –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫']
      ],
      resize_keyboard: true
    }
  };
  
  bot.sendMessage(chatId, 
    '–ü—Ä–∏–≤–µ—Ç! –Ø *–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π –ë–æ—Ç*! üéµ\n\n' +
    '–Ø –º–æ–≥—É —Å–∫–∞—á–∞—Ç—å *–õ–Æ–ë–û–ô* —Ç—Ä–µ–∫ —Å YouTube –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–±–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª!\n\n' +
    '*–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç:*\n' +
    '1. –¢—ã –ø–∏—à–µ—à—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞\n' +
    '2. –Ø –∏—â—É –Ω–∞ YouTube\n' + 
    '3. –°–∫–∞—á–∏–≤–∞—é –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫—É\n' +
    '4. –û—Ç–ø—Ä–∞–≤–ª—è—é MP3 —Ñ–∞–π–ª\n\n' +
    '*–°–ª—É—à–∞–π –ø—Ä—è–º–æ –≤ Telegram!* üéß', 
    options
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–æ—Ç–∞
bot.on('polling_error', (error) => {
  console.log('Polling error:', error.message);
});

bot.on('webhook_error', (error) => {
  console.log('Webhook error:', error.message);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;

  // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  if (!text || text.startsWith('/')) return;

  if (text === 'üéµ –°–∫–∞—á–∞—Ç—å —Ç—Ä–µ–∫') {
    bot.sendMessage(chatId, 
      '–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è!\n\n' +
      '*–ü—Ä–∏–º–µ—Ä—ã:*\n' +
      '‚Ä¢ The Weeknd - Blinding Lights\n' +
      '‚Ä¢ Dua Lipa - Levitating\n' + 
      '‚Ä¢ Metallica - Nothing Else Matters\n' +
      '‚Ä¢ –õ—é–±–æ–π –¥—Ä—É–≥–æ–π —Ç—Ä–µ–∫!\n\n' +
      '*–°–∫–∞—á–∞—é –∏ –æ—Ç–ø—Ä–∞–≤–ª—é –∞—É–¥–∏–æ—Ñ–∞–π–ª!* üéß',
      { parse_mode: 'Markdown' }
    );
    return;
  }
  
  if (text === 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã') {
    bot.sendMessage(chatId, 'üë®‚Äçüíª –°–æ–∑–¥–∞—Ç–µ–ª—å: @ch0nyatski\n\n–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π –±–æ—Ç üéµ');
    return;
  }
  
  if (text === '‚ÑπÔ∏è –ü–æ–º–æ—â—å') {
    bot.sendMessage(chatId, 
      'üéµ *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:*\n\n' +
      '1. –ù–∞–ø–∏—à–∏ *–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞*\n' +
      '2. –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å *–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è*\n' +
      '3. –ñ–¥–∏ 1-3 –º–∏–Ω—É—Ç—ã\n' +
      '4. –ü–æ–ª—É—á–∏ *MP3 —Ñ–∞–π–ª*\n\n' +
      '*–†–∞–±–æ—Ç–∞–µ—Ç —Å –ª—é–±—ã–º–∏ —Ç—Ä–µ–∫–∞–º–∏!* üåç\n' +
      '*–í–Ω–∏–º–∞–Ω–∏–µ:* –î–ª–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–∫–∏ –º–æ–≥—É—Ç –Ω–µ —Å–∫–∞—á–∞—Ç—å—Å—è',
      { parse_mode: 'Markdown' }
    );
    return;
  }
  
  if (text === '‚ö° –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫') {
    const quickSongs = [
      'The Weeknd - Blinding Lights',
      'Dua Lipa - Levitating', 
      'Harry Styles - As It Was',
      'Metallica - Enter Sandman',
      'Eminem - Lose Yourself'
    ];
    
    let quickList = '‚ö° *–ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫:*\n\n';
    quickSongs.forEach(song => {
      quickList += `‚Ä¢ ${song}\n`;
    });
    quickList += '\n–ù–∞–ø–∏—à–∏ –ª—é–±–æ–π –∏–∑ —ç—Ç–∏—Ö —Ç—Ä–µ–∫–æ–≤!';
    
    bot.sendMessage(chatId, quickList, { parse_mode: 'Markdown' });
    return;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
  let processingMsg;
  try {
    processingMsg = await bot.sendMessage(chatId, 'üîç *–ò—â—É —Ç—Ä–µ–∫ –Ω–∞ YouTube...*', { parse_mode: 'Markdown' });

    // –ò—â–µ–º —Ç—Ä–µ–∫ –Ω–∞ YouTube
    const youtubeUrl = await searchYouTube(text);
    
    if (!youtubeUrl) {
      await bot.editMessageText('‚ùå *–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç—Ä–µ–∫ –Ω–∞ YouTube*\n\n–ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ —É—Ç–æ—á–Ω–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ', {
        chat_id: chatId,
        message_id: processingMsg.message_id,
        parse_mode: 'Markdown'
      });
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
    await bot.editMessageText('üì• *–ù–∞—à–µ–ª —Ç—Ä–µ–∫, –ø–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...*', {
      chat_id: chatId,
      message_id: processingMsg.message_id, 
      parse_mode: 'Markdown'
    });

    const videoInfo = await getVideoInfo(youtubeUrl);
    
    if (!videoInfo) {
      await bot.editMessageText('‚ùå *–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–µ–∫–µ*', {
        chat_id: chatId,
        message_id: processingMsg.message_id,
        parse_mode: 'Markdown'
      });
      return;
    }

    // –°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ
    await bot.editMessageText(`üéµ *–°–∫–∞—á–∏–≤–∞—é:* ${videoInfo.title}\n‚è± *–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:* ${videoInfo.duration}`, {
      chat_id: chatId,
      message_id: processingMsg.message_id,
      parse_mode: 'Markdown'
    });

    const audioFile = await downloadAudio(youtubeUrl, chatId);
    
    if (!fs.existsSync(audioFile)) {
      throw new Error('–§–∞–π–ª –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω');
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª
    await bot.editMessageText('üì§ *–û—Ç–ø—Ä–∞–≤–ª—è—é –∞—É–¥–∏–æ—Ñ–∞–π–ª...*', {
      chat_id: chatId,
      message_id: processingMsg.message_id,
      parse_mode: 'Markdown'
    });

    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    const audioStream = fs.createReadStream(audioFile);
    
    await bot.sendAudio(chatId, audioStream, {
      caption: `üéµ ${videoInfo.title}\n‚è± ${videoInfo.duration}\n\n–°–ª—É—à–∞–π –ø—Ä—è–º–æ –≤ Telegram! üéß`,
      title: videoInfo.title.substring(0, 64),
      performer: 'YouTube'
    }, {
      filename: `${videoInfo.title.substring(0, 50)}.mp3`
    });

    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    try {
      fs.unlinkSync(audioFile);
    } catch (unlinkError) {
      console.log('Error deleting temp file:', unlinkError.message);
    }

    await bot.deleteMessage(chatId, processingMsg.message_id);

  } catch (error) {
    console.log('Main error:', error);
    
    if (processingMsg) {
      await bot.editMessageText('‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏*\n\n–í–æ–∑–º–æ–∂–Ω–æ:\n‚Ä¢ –¢—Ä–µ–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π\n‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å YouTube\n‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π —Ç—Ä–µ–∫', {
        chat_id: chatId,
        message_id: processingMsg.message_id,
        parse_mode: 'Markdown'
      }).catch(e => console.log('Edit message error:', e.message));
    } else {
      bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.');
    }
  }
});

console.log('üéµ –ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π –±–æ—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
