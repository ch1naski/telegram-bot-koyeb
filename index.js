const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const axios = require('axios');

const app = express();
const port = process.env.PORT || 8000;

app.get('/', (req, res) => {
  res.send('Bot with AI is running!');
});

app.listen(port, '0.0.0.0', () => {
  console.log('Server started on port ' + port);
});

const token = process.env.BOT_TOKEN;
const bot = new TelegramBot(token, { polling: true });

// –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è —Å –Ω–æ–≤—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏
async function askAI(question) {
  const models = [
    {
      name: 'TinyLlama Chat',
      url: 'https://api-inference.huggingface.co/models/TinyLlama/TinyLlama-1.1B-Chat-v1.0',
      format: 'generated_text'
    },
    {
      name: 'Mistral 7B', 
      url: 'https://api-inference.huggingface.co/models/mistralai/Mistral-7B-v0.1',
      format: 'generated_text'
    },
    {
      name: 'Zephyr 7B',
      url: 'https://api-inference.huggingface.co/models/HuggingFaceH4/zephyr-7b-beta',
      format: 'generated_text'
    },
    {
      name: 'Google Gemma',
      url: 'https://api-inference.huggingface.co/models/google/gemma-7b',
      format: 'generated_text'
    }
  ];

  for (const model of models) {
    try {
      console.log(`Trying model: ${model.name}`);
      
      const response = await axios.post(
        model.url,
        {
          inputs: question,
          parameters: {
            max_new_tokens: 200,
            temperature: 0.8,
            do_sample: true,
            top_p: 0.9
          }
        },
        {
          headers: {
            'Authorization': `Bearer ${process.env.HUGGING_FACE_TOKEN}`,
            'Content-Type': 'application/json'
          },
          timeout: 25000
        }
      );

      console.log(`${model.name} response:`, response.data);

      // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
      if (response.data && response.data[0] && response.data[0].generated_text) {
        let answer = response.data[0].generated_text;
        // –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
        if (answer.toLowerCase().includes(question.toLowerCase())) {
          answer = answer.replace(new RegExp(question, 'gi'), '').trim();
        }
        return answer || `ü§ñ ${model.name} –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å`;
      }
      
    } catch (error) {
      console.log(`${model.name} failed:`, error.response?.status || error.message);
      
      // –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è - –∂–¥–µ–º –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
      if (error.response?.status === 503) {
        const waitTime = error.response.data.estimated_time || 30;
        console.log(`Model ${model.name} is loading, waiting ${waitTime} seconds...`);
        await new Promise(resolve => setTimeout(resolve, waitTime * 1000));
        continue; // –ü—Ä–æ–±—É–µ–º —ç—Ç—É –º–æ–¥–µ–ª—å –µ—â–µ —Ä–∞–∑ –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è
      }
      
      // –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –º–æ–¥–µ–ª—å
      continue;
    }
  }
  
  // –ï—Å–ª–∏ –≤—Å–µ –º–æ–¥–µ–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
  return '‚ùå –í—Å–µ –º–æ–¥–µ–ª–∏ –ò–ò –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. \n\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n‚Ä¢ –ú–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 30 —Å–µ–∫)\n‚Ä¢ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤\n‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é\n\n–ü–æ–ø—Ä–æ–±—É–π —á–µ—Ä–µ–∑ 2-3 –º–∏–Ω—É—Ç—ã!';
}

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  const options = {
    reply_markup: {
      keyboard: [
        ['üß† –°–ø—Ä–æ—Å–∏—Ç—å –ò–ò', 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã'],
        ['üïê –í—Ä–µ–º—è', 'üîß –°—Ç–∞—Ç—É—Å –ò–ò']
      ],
      resize_keyboard: true
    }
  };
  
  bot.sendMessage(chatId, 
    '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ò–ò! üß†\n\n' +
    '–¢–µ–ø–µ—Ä—å —è –ø—Ä–æ–±—É—é –±–æ–ª–µ–µ –Ω–æ–≤—ã–µ –º–æ–¥–µ–ª–∏:\n' +
    '‚Ä¢ TinyLlama 1.1B Chat\n' +
    '‚Ä¢ Mistral 7B\n' + 
    '‚Ä¢ Zephyr 7B\n' +
    '‚Ä¢ Google Gemma 7B\n\n' +
    '–ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å - –ø—Ä–æ–≤–µ—Ä—é —á—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç!', 
    options
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;

  if (!text || text.startsWith('/')) return;

  if (text === 'üß† –°–ø—Ä–æ—Å–∏—Ç—å –ò–ò') {
    bot.sendMessage(chatId, '–ù–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å! –ü—Ä–æ–±—É—é –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –Ω–æ–≤—ã–º –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º... üß†\n\n*–ü—Ä–æ–≤–µ—Ä—è—é 4 —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏*');
  } 
  else if (text === 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã') {
    bot.sendMessage(chatId, 'üë®‚Äçüíª –°–æ–∑–¥–∞—Ç–µ–ª—å: @ch0nyatski\n\n–ü–æ–º–æ—â—å —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –ò–ò');
  }
  else if (text === 'üïê –í—Ä–µ–º—è') {
    bot.sendMessage(chatId, `üïê ${new Date().toLocaleString('ru-RU')}`);
  }
  else if (text === 'üîß –°—Ç–∞—Ç—É—Å –ò–ò') {
    bot.sendMessage(chatId, 
      'üîß *–°—Ç–∞—Ç—É—Å –ò–ò —Å–∏—Å—Ç–µ–º:*\n\n' +
      '‚Ä¢ ü§ñ 4 —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏\n' +
      '‚Ä¢ üîÑ –ê–≤—Ç–æ–ø–æ–≤—Ç–æ—Ä –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ\n' + 
      '‚Ä¢ ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 30 —Å–µ–∫ –µ—Å–ª–∏ –º–æ–¥–µ–ª—å —Å–ø–∏—Ç\n' +
      '‚Ä¢ üìä –õ—É—á—à–∏–µ —à–∞–Ω—Å—ã –Ω–∞ —Ä–∞–±–æ—Ç—É\n\n' +
      '–ü–µ—Ä–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –º–æ–≥—É—Ç –∑–∞–Ω–∏–º–∞—Ç—å –¥–æ 30 —Å–µ–∫—É–Ω–¥!'
    );
  }
  else {
    const thinkingMsg = await bot.sendMessage(chatId, 'üß† –ü—Ä–æ–≤–µ—Ä—è—é —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏...\n*–ü–µ—Ä–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –º–æ–≥—É—Ç –∑–∞–Ω–∏–º–∞—Ç—å –¥–æ 30 —Å–µ–∫—É–Ω–¥*');
    
    try {
      const aiResponse = await askAI(text);
      bot.deleteMessage(chatId, thinkingMsg.message_id);
      bot.sendMessage(chatId, `ü§ñ *–†–µ–∑—É–ª—å—Ç–∞—Ç:*\n\n${aiResponse}`);
    } catch (error) {
      bot.deleteMessage(chatId, thinkingMsg.message_id);
      bot.sendMessage(chatId, 'üí• –í—Å–µ –º–æ–¥–µ–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç.');
    }
  }
});

console.log('–ë–æ—Ç —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏ –∑–∞–ø—É—â–µ–Ω!');
