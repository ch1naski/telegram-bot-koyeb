const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const axios = require('axios');

const app = express();
const port = process.env.PORT || 8000;

app.get('/', (req, res) => {
  res.send('Bot with AI is running!');
});

app.listen(port, '0.0.0.0', () => {
  console.log('Server started on port ' + port);
});

const token = process.env.BOT_TOKEN;
const bot = new TelegramBot(token, { polling: true });

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å —Ç–∞–π–º–∞—É—Ç–∞–º–∏
async function askAI(question) {
  try {
    console.log('Asking AI:', question);
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–∏—Å —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    const timeoutPromise = new Promise((_, reject) => {
      setTimeout(() => reject(new Error('Timeout')), 25000);
    });
    
    // –ó–∞–ø—Ä–æ—Å –∫ –ò–ò
    const aiPromise = axios.post(
      'https://api-inference.huggingface.co/models/TinyLlama/TinyLlama-1.1B-Chat-v1.0',
      {
        inputs: question,
        parameters: {
          max_new_tokens: 150,
          temperature: 0.7,
          do_sample: true
        }
      },
      {
        headers: {
          'Authorization': `Bearer ${process.env.HUGGING_FACE_TOKEN}`,
          'Content-Type': 'application/json'
        }
      }
    );

    // –ñ–¥–µ–º –ª–∏–±–æ –æ—Ç–≤–µ—Ç, –ª–∏–±–æ —Ç–∞–π–º–∞—É—Ç
    const response = await Promise.race([aiPromise, timeoutPromise]);
    console.log('AI Response received');

    if (response.data && response.data[0] && response.data[0].generated_text) {
      let answer = response.data[0].generated_text;
      if (answer.includes(question)) {
        answer = answer.replace(question, '').trim();
      }
      return answer || 'ü§ñ –ò–ò —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –æ—Ç–≤–µ—Ç, –Ω–æ –æ–Ω –ø—É—Å—Ç–æ–π.';
    } else {
      return 'ü§ñ –ò–ò –æ–±—Ä–∞–±–æ—Ç–∞–ª –∑–∞–ø—Ä–æ—Å, –Ω–æ –Ω–µ —Å–º–æ–≥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç.';
    }
    
  } catch (error) {
    console.log('AI Error:', error.message, error.response?.status);
    
    if (error.message === 'Timeout') {
      return '‚è∞ –ò–ò –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –∑–∞ 25 —Å–µ–∫—É–Ω–¥. –ú–æ–¥–µ–ª—å –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.';
    }
    
    if (error.response?.status === 503) {
      return 'üîß –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π —á–µ—Ä–µ–∑ 1-2 –º–∏–Ω—É—Ç—ã.';
    }
    
    if (error.response?.status === 404) {
      return '‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç.';
    }
    
    return '‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ò–ò. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å.';
  }
}

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  const options = {
    reply_markup: {
      keyboard: [
        ['üß† –°–ø—Ä–æ—Å–∏—Ç—å –ò–ò', 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã'],
        ['üïê –í—Ä–µ–º—è', '‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å']
      ],
      resize_keyboard: true
    }
  };
  
  bot.sendMessage(chatId, 
    '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å –ò–ò! üß†\n\n' +
    '–ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å - —è –ø–æ–ø—Ä–æ–±—É—é –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏.\n\n' +
    '*–í–Ω–∏–º–∞–Ω–∏–µ:* –ò–ò –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–¥–ª–µ–Ω–Ω—ã–º –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º —Ö–æ—Å—Ç–∏–Ω–≥–µ.', 
    options
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;

  if (!text || text.startsWith('/')) return;

  if (text === 'üß† –°–ø—Ä–æ—Å–∏—Ç—å –ò–ò') {
    bot.sendMessage(chatId, '–ù–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å! –ü—Ä–æ–±—É—é –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏... üß†');
  } 
  else if (text === 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã') {
    bot.sendMessage(chatId, '–°–æ–∑–¥–∞—Ç–µ–ª—å: @ch0nyatski');
  }
  else if (text === 'üïê –í—Ä–µ–º—è') {
    bot.sendMessage(chatId, `–í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}`);
  }
  else if (text === '‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å') {
    bot.sendMessage(chatId, 'ü§ñ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω\nüß† –ò–ò: –ø—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è\n‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –Ω–∞–≥—Ä—É–∑–∫–∏');
  }
  else {
    const thinkingMsg = await bot.sendMessage(chatId, 'üß† –ü—Ä–æ–±—É—é –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ò–ò...');
    
    try {
      const aiResponse = await askAI(text);
      bot.deleteMessage(chatId, thinkingMsg.message_id);
      bot.sendMessage(chatId, `ü§ñ *–†–µ–∑—É–ª—å—Ç–∞—Ç:*\n\n${aiResponse}`);
    } catch (error) {
      bot.deleteMessage(chatId, thinkingMsg.message_id);
      bot.sendMessage(chatId, '‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start');
    }
  }
});

console.log('–ë–æ—Ç —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏ –∑–∞–ø—É—â–µ–Ω!');
