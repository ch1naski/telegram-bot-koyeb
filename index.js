const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const axios = require('axios');

const app = express();
const port = process.env.PORT || 8000;

app.get('/', (req, res) => {
  res.send('Bot with AI is running!');
});

app.listen(port, '0.0.0.0', () => {
  console.log('Server started on port ' + port);
});

const token = process.env.BOT_TOKEN;
const bot = new TelegramBot(token, { polling: true });

// –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–±—É–µ—Ç —Ä–∞–∑–Ω—ã–µ –º–æ–¥–µ–ª–∏
async function askAI(question) {
  const models = [
    {
      name: 'Facebook Blenderbot',
      url: 'https://api-inference.huggingface.co/models/facebook/blenderbot-400M-distill',
      format: 'blenderbot'
    },
    {
      name: 'Google T5', 
      url: 'https://api-inference.huggingface.co/models/google/flan-t5-large',
      format: 't5'
    },
    {
      name: 'Microsoft DialoGPT',
      url: 'https://api-inference.huggingface.co/models/microsoft/DialoGPT-small', 
      format: 'dialogpt'
    }
  ];

  for (const model of models) {
    try {
      console.log(`Trying model: ${model.name}`);
      
      const response = await axios.post(
        model.url,
        {
          inputs: question,
          parameters: {
            max_new_tokens: 150,
            temperature: 0.7,
            do_sample: true
          }
        },
        {
          headers: {
            'Authorization': `Bearer ${process.env.HUGGING_FACE_TOKEN}`,
            'Content-Type': 'application/json'
          },
          timeout: 20000
        }
      );

      console.log(`${model.name} response:`, response.data);

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
      if (model.format === 'blenderbot' && response.data && response.data.generated_text) {
        return response.data.generated_text;
      }
      else if (response.data && response.data[0] && response.data[0].generated_text) {
        let answer = response.data[0].generated_text;
        if (answer.includes(question)) {
          answer = answer.replace(question, '').trim();
        }
        return answer || `–û—Ç–≤–µ—Ç –æ—Ç ${model.name}`;
      }
      
    } catch (error) {
      console.log(`${model.name} failed:`, error.response?.status || error.message);
      // –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –º–æ–¥–µ–ª—å
      continue;
    }
  }
  
  // –ï—Å–ª–∏ –≤—Å–µ –º–æ–¥–µ–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
  return '‚ùå –í—Å–µ –º–æ–¥–µ–ª–∏ –ò–ò –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. \n\n–ü–æ–ø—Ä–æ–±—É–π:\\n‚Ä¢ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ—Ç —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç\\n‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã\\n‚Ä¢ –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–∑–¥–∞—Ç–µ–ª—é: @ch0nyatski';
}

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  const options = {
    reply_markup: {
      keyboard: [
        ['üß† –°–ø—Ä–æ—Å–∏—Ç—å –ò–ò', 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã'],
        ['üïê –í—Ä–µ–º—è', 'üîß –°—Ç–∞—Ç—É—Å –ò–ò']
      ],
      resize_keyboard: true
    }
  };
  
  bot.sendMessage(chatId, 
    '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å –ò–ò –æ—Ç Hugging Face! üß†\n\n' +
    '–Ø –ø—Ä–æ–±—É—é –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Ä–∞–∑–Ω—ã–º –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º:\n' +
    '‚Ä¢ Facebook Blenderbot\n' +
    '‚Ä¢ Google T5\n' + 
    '‚Ä¢ Microsoft DialoGPT\n\n' +
    '–ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å - –ø—Ä–æ–≤–µ—Ä—é —á—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç!', 
    options
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;

  if (!text || text.startsWith('/')) return;

  if (text === 'üß† –°–ø—Ä–æ—Å–∏—Ç—å –ò–ò') {
    bot.sendMessage(chatId, '–ù–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å! –ü—Ä–æ–±—É—é –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –¥–æ—Å—Ç—É–ø–Ω—ã–º –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º... üß†\n\n*–ü—Ä–æ–≤–µ—Ä—è—é 3 —Ä–∞–∑–Ω—ã–µ –º–æ–¥–µ–ª–∏*');
  } 
  else if (text === 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã') {
    bot.sendMessage(chatId, 'üë®‚Äçüíª –°–æ–∑–¥–∞—Ç–µ–ª—å: @ch0nyatski\n\n–ü–æ–º–æ—â—å —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –ò–ò');
  }
  else if (text === 'üïê –í—Ä–µ–º—è') {
    bot.sendMessage(chatId, `üïê ${new Date().toLocaleString('ru-RU')}`);
  }
  else if (text === 'üîß –°—Ç–∞—Ç—É—Å –ò–ò') {
    bot.sendMessage(chatId, 
      'üîß *–°—Ç–∞—Ç—É—Å –ò–ò —Å–∏—Å—Ç–µ–º:*\n\n' +
      '‚Ä¢ ü§ñ –ü—Ä–æ–±—É—é —Ä–∞–∑–Ω—ã–µ –º–æ–¥–µ–ª–∏\n' +
      '‚Ä¢ üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–±–æ—Ä\n' + 
      '‚Ä¢ ‚ö° –¢–∞–π–º–∞—É—Ç 20 —Å–µ–∫ –Ω–∞ –º–æ–¥–µ–ª—å\n' +
      '‚Ä¢ üìä –í –ª–æ–≥–∞—Ö –≤–∏–¥–Ω–æ —á—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç\n\n' +
      '–ù–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å - –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–µ–º!'
    );
  }
  else {
    const thinkingMsg = await bot.sendMessage(chatId, 'üß† –ü—Ä–æ–≤–µ—Ä—è—é –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏...\n*–≠—Ç–æ –∑–∞–π–º–µ—Ç –¥–æ 60 —Å–µ–∫—É–Ω–¥*');
    
    try {
      const aiResponse = await askAI(text);
      bot.deleteMessage(chatId, thinkingMsg.message_id);
      bot.sendMessage(chatId, `ü§ñ *–†–µ–∑—É–ª—å—Ç–∞—Ç:*\n\n${aiResponse}`);
    } catch (error) {
      bot.deleteMessage(chatId, thinkingMsg.message_id);
      bot.sendMessage(chatId, 'üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫–æ –≤—Å–µ–º –º–æ–¥–µ–ª—è–º.');
    }
  }
});

console.log('–ë–æ—Ç —Å –º—É–ª—å—Ç–∏-–º–æ–¥–µ–ª—å–Ω—ã–º –ø–æ–¥—Ö–æ–¥–æ–º –∑–∞–ø—É—â–µ–Ω!');
